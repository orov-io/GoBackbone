image: golang

clone:
  depth: full              # SonarCloud scanner needs the full history to assign issues properly

definitions:
  caches:
    sonar: ~/.sonar/cache  # Caching SonarCloud artifacts will speed up your build
  
  steps:
    - step: &deploy-app
        name: Deploy to dev environment on Gcloud.
        deployment: develop   
        image: google/cloud-sdk:alpine
        script:
          - echo $GCLOUD_API_KEYFILE | base64 -d > ./gcloud-api-key.json
          - gcloud auth activate-service-account --key-file gcloud-api-key.json
          - gcloud config set project $GCLOUD_PROJECT 
          - apk add gettext
          - envsubst < openapi-appengine_example.yaml >> openapi-appengine.yaml
          - envsubst < app_example.yaml >> app.yaml
          - gcloud -q app deploy app.yaml
          - gcloud -q endpoints services deploy openapi-appengine.yaml

    - step: &build-test-sonarcloud
        name: Testing and analyzing project
        deployment: test
        script:
          - pwd
          - go get -u github.com/golang/dep/cmd/dep
          - mkdir -p $GOPATH/${WORKDIR}/${SERVICE_NAME}/
          - cp -r ./* $GOPATH/${WORKDIR}/${SERVICE_NAME}/
          - cd $GOPATH/${WORKDIR}/${SERVICE_NAME}/
          - dep ensure -v
          - echo $FIREBASE_CREDENTIAL | base64 -d > firebase_credential.json
          - go test -json > report.json
          - go test -coverprofile=coverage.out
          - pipe: sonarsource/sonarcloud-scan:0.1.5
            variables:
              SONAR_TOKEN: $SONAR_TOKEN

pipelines:
  branches:
    develop:
      - step: *deploy-app
    
  tags:
    rc*:
      - step: 
          <<: *deploy-app
          deployment: staging
          name: Deploy to stage environment on Gcloud.

    v*:
      - step:
          <<: *deploy-app
          deployment: production
          name: Deploy to production environment on Gcloud.

  pull-requests:
    '**':
      - step: *build-test-sonarcloud